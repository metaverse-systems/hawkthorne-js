{"version":3,"sources":["SpriteSheet.js","SpriteAnimation.js","Components.js","DrawingSystem.js","tmx2json.js","App.js","reportWebVitals.js","index.js"],"names":["SpriteSheet","canvas","url","spriteWidth","spriteHeight","draw","spriteX","spriteY","x","y","options","undefined","scale","xScale","xTranslate","yScale","yTranslate","newX","newY","flipHorizontal","width","flipVertical","height","flipDiagonal","context","save","translate","rotate","Math","PI","drawImage","sheet","restore","this","Image","src","getContext","SpriteAnimation","characterMap","animate","animation","direction","restart","frame","loop","charMap","animations","Array","isArray","repeat","forEach","e","split","search","startX","endX","i","push","length","SpriteComponent","config","sprite","Type","Component","TilesheetComponent","TileComponent","tilesheet","PositionComponent","DrawingSystem","ConfigUpdate","Object","keys","key","Update","board","clearRect","Container","Components","entity","tilesheets","tile","pos","Handle","System","pako","require","Properties","xml","childNodes","nodeName","attr","attributes","j","name","value","textContent","console","log","Tileset","properties","image","TMX_Image","Layer","tiles","TMX_Data","compressedData","atob","innerHTML","data","inflate","id","tmx2json","fetch","then","response","text","tmx_map","DOMParser","parseFromString","getElementsByTagName","tilesets","layers","ECS","Manager","baseURL","characterNames","App","props","componentDidMount","handleResize","json","setState","initializeMap","initializeCharacters","characters","assign","state","window","innerWidth","innerHeight","drawingSystem","document","getElementById","t","map","setTimeout","layer","buildLayer","c","spriteURL","characterImagesBaseURL","world","Entity","Export","Start","tileset","source","tileWidth","tilewidth","tileHeight","tileheight","tilesheetCols","maxCols","maxRows","index","tileId","tX","tY","changeAnimation","target","updateSpriteComponent","changeDirection","destroyTiles","destroy","changeMap","className","defaultValue","onChange","Maps","m","a","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"4jEAwEeA,EAtEb,WAAYC,EAAQC,EAAKC,EAAaC,GAAe,IAAD,gCAepDC,KAAO,SAACC,EAASC,EAASC,EAAGC,GAAqB,IAAlBC,EAAiB,uDAAP,QACnBC,IAAlBD,EAAQE,QAAqBF,EAAQE,MAAQ,GAEhD,IAAIC,EAAS,EAAGC,EAAa,EACzBC,EAAS,EAAGC,EAAa,EACzBC,EAAOT,EAAGU,EAAOT,EAcrB,IAZ8B,IAA3BC,EAAQS,iBACTN,GAAU,EACVC,EAAa,EAAKb,OAAOmB,MACzBH,EAAO,EAAKhB,OAAOmB,MAAQZ,EAAI,EAAKL,cAGV,IAAzBO,EAAQW,eACTN,GAAU,EACVC,EAAa,EAAKf,OAAOqB,OACzBJ,EAAO,EAAKjB,OAAOqB,OAASb,EAAI,EAAKL,cAGpCM,EAAQa,aAWT,OAVA,EAAKC,QAAQC,OACb,EAAKD,QAAQE,UAAUlB,EAAGC,GAC1B,EAAKe,QAAQG,OAAcC,KAAKC,GAAK,IAAjB,KACpB,EAAKL,QAAQM,UAAU,EAAKC,MACzBzB,EAAU,EAAKH,YAAeI,EAAU,EAAKH,aAC9C,EAAKD,YAAa,EAAKC,cACtB,EAAKD,YAAa,EACnB,EAAKA,YAAcO,EAAQE,MAAO,EAAKR,aAAeM,EAAQE,YAEhE,EAAKY,QAAQQ,UAIZtB,EAAQW,cAAgBX,EAAQS,gBACjC,EAAKK,QAAQC,OACb,EAAKD,QAAQE,UAAUZ,EAAYE,GACnC,EAAKQ,QAAQZ,MAAMC,EAAQE,GAC3B,EAAKS,QAAQM,UAAU,EAAKC,MACzBzB,EAAU,EAAKH,YAAeI,EAAU,EAAKH,aAC9C,EAAKD,YAAa,EAAKC,aACvBa,EAAMC,EACN,EAAKf,YAAcO,EAAQE,MAAO,EAAKR,aAAeM,EAAQE,OAEhE,EAAKY,QAAQQ,WAEb,EAAKR,QAAQM,UAAU,EAAKC,MACzBzB,EAAU,EAAKH,YAAeI,EAAU,EAAKH,aAC9C,EAAKD,YAAa,EAAKC,aACvBI,EAAGC,EACH,EAAKN,YAAcO,EAAQE,MAAO,EAAKR,aAAeM,EAAQE,QA/DlEqB,KAAKF,MAAQ,IAAIG,MACjBD,KAAKF,MAAMI,IAAMjC,EACjB+B,KAAK9B,YAAcA,EACnB8B,KAAK7B,aAAeA,EACpB6B,KAAKhC,OAASA,EACdgC,KAAKT,QAAUvB,EAAOmC,WAAW,OCmEtBC,EAvEb,WAAYpC,EAAQC,EAAKC,EAAaC,EAAckC,GAAe,IAAD,gCAUlEC,QAAU,SAACC,EAAWC,EAAWjC,EAAGC,EAAGG,GACrC,IAAI8B,GAAU,EAYd,GAVG,EAAKF,YAAcA,IACpB,EAAKA,UAAYA,EACjBE,GAAU,GAGT,EAAKD,YAAcA,IACpB,EAAKA,UAAYA,EACjBC,GAAU,GAGTA,EAAS,CACV,EAAKC,MAAQ,EACb,EAAKC,KAAO,GAEZ,IAAIC,EAAU,EAAKP,aAAaE,GAC5BM,EAAa,GACdC,MAAMC,QAAQH,IAEf,EAAKI,OAASJ,EAAQ,GACtBC,EAAaD,EAAQ,KAErB,EAAKI,OAASJ,EAAQJ,GAAW,GACjCK,EAAaD,EAAQJ,GAAW,IAGlCK,EAAWI,SAAQ,SAACC,GAGlB,MAAaA,EAAEC,MAAM,KAArB,mBAAK5C,EAAL,KAAQC,EAAR,KACA,IAAsB,IAAnBD,EAAE6C,OAAO,KAGV,IADA,MAAqB7C,EAAE4C,MAAM,KAA7B,mBAAKE,EAAL,KAAaC,EAAb,KACQC,EAAIF,EAAQE,GAAKD,EAAMC,IAC7B,EAAKZ,KAAKa,KAAK,CAAEjD,EAAIgD,EAAI,EAAI/C,EAAIA,EAAI,SAGvC,EAAKmC,KAAKa,KAAK,CAAEjD,EAAIA,EAAI,EAAIC,EAAIA,EAAI,OAK3C,EAAKJ,KAAKG,EAAGC,EAAGG,IAtDgD,KA6DlEP,KAAO,SAACG,EAAGC,EAAGG,GACY,IAArB,EAAKgC,KAAKc,SAEb,EAAK3B,MAAM1B,KAAK,EAAKuC,KAAK,EAAKD,OAAOnC,EAAG,EAAKoC,KAAK,EAAKD,OAAOlC,EAAGD,EAAGC,EAAGG,GACxE,EAAK+B,QAEF,EAAKA,QAAU,EAAKC,KAAKc,SAAQ,EAAKf,MAAQ,KAlEjDV,KAAKF,MAAQ,IAAI/B,EAAYC,EAAQC,EAAKC,EAAaC,GACvD6B,KAAKU,MAAQ,EACbV,KAAKO,UAAY,GACjBP,KAAKQ,UAAY,GACjBR,KAAKgB,OAAS,GACdhB,KAAKW,KAAO,GACZX,KAAKK,aAAeA,GCRlBqB,E,kDAEJ,WAAYC,GAAS,IAAD,8BAClB,cAAMA,IACDC,OAAS,IAAIxB,EAAgBuB,EAAO3D,OAAQ2D,EAAO1D,IAAK0D,EAAOxC,MAAOwC,EAAOtC,OAAQsC,EAAOtB,cACjG,EAAKwB,KAAO,kBAHM,E,UAFQC,aASxBC,E,kDAEJ,WAAYJ,GAAS,IAAD,8BAClB,cAAMA,IACDE,KAAO,qBAFM,E,UAFWC,aAQ3BE,E,kDAEJ,WAAYL,GAAS,IAAD,8BAClB,cAAMA,IACDM,UAAYN,EAAOM,UACxB,EAAK9C,MAAQwC,EAAOxC,MACpB,EAAKE,OAASsC,EAAOtC,OACrB,EAAKd,EAAIoD,EAAOpD,EAChB,EAAKC,EAAImD,EAAOnD,EAChB,EAAKC,QAAUkD,EAAOlD,QACtB,EAAKoD,KAAO,gBARM,E,UAFMC,aActBI,E,kDAEJ,WAAYP,GAAS,IAAD,8BAClB,cAAMA,IACDpD,EAAIoD,EAAOpD,EAChB,EAAKC,EAAImD,EAAOnD,EAChB,EAAKqD,KAAO,oBAJM,E,UAFUC,aCyBjBK,E,kDAtDb,WAAYR,GACX,IAAD,kCACgBjD,IAAXiD,IACDA,EAAS,KAGX,cAAMA,IAKRS,aAAe,SAACT,GACdU,OAAOC,KAAKX,GAAQV,SAAQ,SAACsB,GAC3B,EAAKZ,OAAOY,GAAOZ,EAAOY,OAZ9B,EAgBAC,OAAS,gBACkB9D,IAAtB,EAAKiD,OAAOc,QACL,EAAKd,OAAOc,MAAMtC,WAAW,MAEnCuC,UAAU,EAAG,EAAG,EAAKf,OAAOc,MAAMtD,MAAO,EAAKwC,OAAOc,MAAMpD,aAERX,IAApD,EAAKiE,UAAUC,WAAf,oBACHP,OAAOC,KAAK,EAAKK,UAAUC,WAAf,oBAAiD3B,SAAQ,SAAC4B,GACpE,IAAIZ,EAAY,EAAKU,UAAUC,WAAf,mBAAgDC,QAE1BnE,IAAnC,EAAKoE,WAAWb,EAAUhE,OAC7B,EAAK6E,WAAWb,EAAUhE,KAAO,IAAIF,EAAY,EAAK4D,OAAOc,MAAOR,EAAUhE,IAC7BgE,EAAU9C,MAAO8C,EAAU5C,iBAG5BX,IAA/C,EAAKiE,UAAUC,WAAf,eACHP,OAAOC,KAAK,EAAKK,UAAUC,WAAf,eAA4C3B,SAAQ,SAAC4B,GAC/D,IAAIE,EAAO,EAAKJ,UAAUC,WAAf,cAA2CC,GAClDG,EAAM,EAAKL,UAAUC,WAAf,kBAA+CC,GAC7C,EAAKC,WAAWC,EAAKd,WAE3B7D,KAAK2E,EAAKxE,EAAGwE,EAAKvE,EAAGwE,EAAIzE,EAAIwE,EAAK5D,MAAO6D,EAAIxE,EAAIuE,EAAK1D,OAAQ0D,EAAKtE,iBAGvBC,IAAjD,EAAKiE,UAAUC,WAAf,iBACHP,OAAOC,KAAK,EAAKK,UAAUC,WAAf,iBAA8C3B,SAAQ,SAAC4B,GACjE,IAAIjB,EAAS,EAAKe,UAAUC,WAAf,gBAA6CC,GACtDG,EAAM,EAAKL,UAAUC,WAAf,kBAA+CC,GAGtDjB,EAAOA,QACRA,EAAOA,OAAOtB,QAAQsB,EAAOrB,UAAWqB,EAAOpB,UAAWwC,EAAIzE,EAAGyE,EAAIxE,EAAG,SAzC5E,EAAKyE,OAAS,gBACd,EAAKH,WAAa,GAPpB,E,UAH0BI,UCHtBC,EAAOC,EAAQ,IA8CfC,EAEJ,WAAYC,GAAM,oBAChB,IAAI,IAAI/B,EAAI,EAAGA,EAAI+B,EAAIC,WAAW9B,OAAQF,IAAK,CAC7C,IAAIiC,EAAWF,EAAIC,WAAWhC,GAAGiC,SACjC,OAAOA,GAEL,IAAK,WAEH,IADA,IAAIC,EAAOH,EAAIC,WAAWhC,GAAGmC,WACrBC,EAAI,EAAGA,EAAIF,EAAKhC,OAAQkC,IAAK,CACnC,IAAIC,EAAOH,EAAKE,GAAGC,KACfC,EAAQJ,EAAKE,GAAGG,YAEpB9D,KAAK4D,GAAQC,EAEf,MACF,IAAK,QACH,MACF,QACEE,QAAQC,IAAI,gBAAkBR,MAOlCS,EAEJ,WAAYX,GAAM,oBAChB,IAAI,IAAI/B,EAAI,EAAGA,EAAI+B,EAAII,WAAWjC,OAAQF,IAAK,CAC7C,IAAIqC,EAAON,EAAII,WAAWnC,GAAGqC,KACzBC,EAAQP,EAAII,WAAWnC,GAAGuC,YAE9B9D,KAAK4D,GAAQC,EAGf,IAAI,IAAItC,EAAI,EAAGA,EAAI+B,EAAIC,WAAW9B,OAAQF,IAAK,CAC7C,IAAIiC,EAAWF,EAAIC,WAAWhC,GAAGiC,SACjC,OAAOA,GAEL,IAAK,aACHxD,KAAKkE,WAAa,IAAIb,EAAWC,EAAIC,WAAWhC,IAChD,MACF,IAAK,QACHvB,KAAKmE,MAAQ,IAAIC,EAAUd,EAAIC,WAAWhC,IAC1C,MACF,IAAK,QACH,MACF,QACEwC,QAAQC,IAAI,yBAA2BR,MAO3Ca,EAEJ,WAAYf,GAAM,oBAChB,IAAI,IAAI/B,EAAI,EAAGA,EAAI+B,EAAII,WAAWjC,OAAQF,IAAK,CAC7C,IAAIqC,EAAON,EAAII,WAAWnC,GAAGqC,KACzBC,EAAQP,EAAII,WAAWnC,GAAGuC,YAE9B9D,KAAK4D,GAAQC,EAGf,IAAI,IAAItC,EAAI,EAAGA,EAAI+B,EAAIC,WAAW9B,OAAQF,IAAK,CAC7C,IAAIiC,EAAWF,EAAIC,WAAWhC,GAAGiC,SACjC,OAAOA,GAEL,IAAK,QACH,MACF,IAAK,OACHxD,KAAKsE,MAAQ,IAAIC,EAASjB,EAAIC,WAAWhC,IAAI+C,MAC7C,MACF,QACEP,QAAQC,IAAI,yBAA2BR,MAO3Ce,EAEJ,WAAYjB,GAAM,oBAChB,IAAI,IAAI/B,EAAI,EAAGA,EAAI+B,EAAII,WAAWjC,OAAQF,IAAK,CAC7C,IAAIqC,EAAON,EAAII,WAAWnC,GAAGqC,KACzBC,EAAQP,EAAII,WAAWnC,GAAGuC,YAE9B9D,KAAK4D,GAAQC,EAGf,IAAIW,EAAiBC,KAAKnB,EAAIoB,WAC1BC,EAAOxB,EAAKyB,QAAQJ,GAExBxE,KAAKsE,MAAQ,GAEb,IAAI,IAAI/C,EAAI,EAAGA,EAAIoD,EAAKlD,OAAQF,GAAK,EAAG,CACtC,IAAIsC,GAASc,EAAKpD,EAAI,IAAM,KACfoD,EAAKpD,EAAI,IAAM,KACfoD,EAAKpD,EAAI,IAAM,GAChBoD,EAAKpD,EAAI,GAEjBwB,EAAO,GACA,WAARc,IACDd,EAAK7D,gBAAiB,EACtB2E,GAAS,YAGA,WAARA,IACDd,EAAK3D,cAAe,EACpByE,GAAS,YAGA,UAARA,IACDd,EAAKzD,cAAe,EACpBuE,GAAS,WAEXd,EAAK8B,GAAKhB,EAAQ,EAElB7D,KAAKsE,MAAM9C,KAAKuB,KAKhBqB,EAEJ,WAAYd,GAAM,oBAChB,IAAI,IAAI/B,EAAI,EAAGA,EAAI+B,EAAII,WAAWjC,OAAQF,IAAK,CAC7C,IAAIqC,EAAON,EAAII,WAAWnC,GAAGqC,KACzBC,EAAQP,EAAII,WAAWnC,GAAGuC,YAE9B9D,KAAK4D,GAAQC,IAKJiB,EApLb,WAAY7G,GAAM,IAAD,2BACf8G,MAAM9G,GACL+G,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACL,GAIL,IAHA,IAEMQ,GAFS,IAAIC,WACGC,gBAAgBV,EAAM,YACrBW,qBAAqB,OAAO,GAC3C/D,EAAI,EAAGA,EAAI4D,EAAQzB,WAAWjC,OAAQF,IAAK,CACjD,IAAIqC,EAAOuB,EAAQzB,WAAWnC,GAAGqC,KAC7BC,EAAQsB,EAAQzB,WAAWnC,GAAGuC,YAEtB,YAATF,IACH,EAAKA,GAAQC,GAGf,EAAK0B,SAAW,GAChB,EAAKC,OAAS,GAEd,IAAI,IAAIjE,EAAI,EAAGA,EAAI4D,EAAQ5B,WAAW9B,OAAQF,IAAK,CACjD,IAAIiC,EAAW2B,EAAQ5B,WAAWhC,GAAGiC,SACrC,OAAOA,GAEL,IAAK,aACH,EAAKU,WAAa,IAAIb,EAAW8B,EAAQ5B,WAAWhC,IACpD,MACF,IAAK,UACH,EAAKgE,SAAS/D,KAAK,IAAIyC,EAAQkB,EAAQ5B,WAAWhC,KAClD,MACF,IAAK,QACH,EAAKiE,OAAOhE,KAAK,IAAI6C,EAAMc,EAAQ5B,WAAWhC,KAC9C,MACF,IAAK,QACH,MACF,QACEwC,QAAQC,IAAI,gBAAkBR,S,eC9BpCiC,EAAM,IAAIC,UAEVC,EAAU,yEAIVC,EAAiB,CACrB,OAAQ,SAAU,QAAS,SAAU,UAAW,SAAU,UAAW,OAAY,OAAQ,WACzF,QAAS,QAAS,OAAQ,UAAW,UAAW,OAAQ,SAAU,UAAW,SAAU,SAiM1EC,E,kDA3Lb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAkBRC,kBAAoB,WAClB,EAAKC,eACLjB,MA9BoBY,iGA+BnBX,MAAK,SAACC,GAAD,OAAcA,EAASgB,UAC5BjB,MAAK,SAACL,GACL,EAAKuB,SAAS,CAAE7F,aAAcsE,IAAQ,WACpC,EAAKwB,gBACL,EAAKC,6BAITR,EAAe3E,SAAQ,SAAC2C,GAEtBmB,MA3CmBY,yFA0CW/B,EAAO,SAEpCoB,MAAK,SAACC,GAAD,OAAcA,EAASgB,UAC5BjB,MAAK,SAACL,GACL,IAAI0B,EAAahE,OAAOiE,OAAO,GAAI,EAAKC,MAAMF,YAC9CA,EAAWzC,GAAQe,EACnB,EAAKuB,SAAS,CAAEG,WAAYA,WArCf,EA0CnBL,aAAe,WACb,IAAM7G,EAAQqH,OAAOC,WACfpH,EAASmH,OAAOE,YAEU,OAA7B,EAAKH,MAAMI,eACZ,EAAKJ,MAAMI,cAAcvE,aAAa,CAAE/C,OAAQA,EAAQF,MAAOA,EAAOsD,MAAOmE,SAASC,eAAe,YA/CtF,EAmDnBV,cAAgB,WACd,IAAIW,EAAI,IAAIhC,EAASa,EAAU,aAAe,EAAKY,MAAMQ,IAAM,QAE/DC,YAAW,WACTF,EAAEtB,OAAOvE,SAAQ,SAACgG,GAChB,EAAKC,WAAWD,EAAOH,EAAEvB,SAAS,SAGnC,MA3Dc,EA8DnBa,qBAAuB,WACrB,IAAIpI,EAAS4I,SAASC,eAAe,SACjCtI,EAAI,EACJC,EAAI,IAERoH,EAAe3E,SAAQ,SAACkG,GACtB,IAAIC,EA9EqBzB,gGA8EgBwB,EAAzBE,YACZnG,EAAI,EAAKoG,MAAMC,SACnBrG,EAAEY,UAAU,IAAII,EAAkB,CAAE3D,EAAGA,EAAGC,EAAGA,KAC7C0C,EAAEY,UAAU,IAAIJ,EAAgB,CAAE1D,OAAQA,EAAQC,IAAKmJ,EAAWjI,MAAO,GAAIE,OAAQ,GACnFgB,aAAc,EAAKkG,MAAMlG,aAAcE,UAAW,EAAKgG,MAAMhG,UAAWC,UAAW,EAAK+F,MAAM/F,cAEhGjC,GAAK,IACE,MACLA,EAAI,EACJC,GAAK,OAITuF,QAAQC,IAAI,EAAKsD,MAAME,UACvB,EAAKF,MAAMG,MAAM,MAlFA,EAqFnBP,WAAa,SAACD,EAAOS,GACnB,IAAIzF,EAAY0D,EAAU,eAAiB+B,EAAQvD,MAAMwD,OACrDC,EAAYF,EAAQG,UACpBC,EAAaJ,EAAQK,WACrBC,EAAgBN,EAAQvD,MAAMhF,MAAQyI,EAEtC1G,EAAI,EAAKoG,MAAMC,SACnBrG,EAAEY,UAAU,IAAIC,EAAmB,CAAE9D,IAAKgE,EAAW9C,MAAOyI,EAAWvI,OAAQyI,KAM/E,IAJA,IAAIG,EAAUhB,EAAM9H,MAChB+I,EAAUjB,EAAM5H,OAEhB8I,EAAQ,EACJ3J,EAAI,EAAGA,EAAI0J,EAAS1J,IAE1B,IAAI,IAAID,EAAI,EAAGA,EAAI0J,EAAS1J,IAC5B,CACE,IAAI6J,EAASnB,EAAM3C,MAAM6D,GAAOtD,GAChC,IAAe,IAAZuD,EAAH,CAMA,IAAIC,EAAKD,EAASJ,EACdM,GAAMF,EAASC,GAAML,EAErBvJ,EAAU,IAC2B,IAAtCwI,EAAM3C,MAAM6D,GAAOjJ,iBACpBT,EAAQS,gBAAiB,IAEY,IAApC+H,EAAM3C,MAAM6D,GAAO/I,eACpBX,EAAQW,cAAe,IAEc,IAApC6H,EAAM3C,MAAM6D,GAAO7I,eACpBb,EAAQa,cAAe,IAEzB4B,EAAI,EAAKoG,MAAMC,UACbzF,UAAU,IAAII,EAAkB,CAAE3D,EAAGA,EAAGC,EAAGA,KAC7C0C,EAAEY,UAAU,IAAIE,EAAc,CAAEC,UAAWA,EAAW9C,MAAOyI,EAAWvI,OAAQyI,EAAYvJ,EAAG8J,EAAI7J,EAAG8J,EAAI7J,QAASA,KAEnH0J,SArBIA,MAzGS,EAmInBI,gBAAkB,SAACrH,GACjB,EAAKgF,SAAS,CAAE3F,UAAWW,EAAEsH,OAAO3E,QAAS,WAC3C,EAAK4E,4BArIU,EAyInBC,gBAAkB,SAACxH,GACjB,EAAKgF,SAAS,CAAE1F,UAAWU,EAAEsH,OAAO3E,QAAS,WAC3C,EAAK4E,4BA3IU,EA+InBA,sBAAwB,WACtBpG,OAAOC,KAAK,EAAKgF,MAAM1E,WAAX,iBAA0C3B,SAAQ,SAAC4B,GAC7D,EAAKyE,MAAM1E,WAAX,gBAAyCC,GAAQtC,UAAY,EAAKgG,MAAMhG,UACxE,EAAK+G,MAAM1E,WAAX,gBAAyCC,GAAQrC,UAAY,EAAK+F,MAAM/F,cAlJzD,EAsJnBmI,aAAe,WACbtG,OAAOC,KAAK,EAAKgF,MAAM1E,WAAX,eAAwC3B,SAAQ,SAAC4B,GAC3D,EAAKyE,MAAMC,OAAO1E,GAAQ+F,aAE5B7E,QAAQC,IAAI,EAAKsD,MAAME,WA1JN,EA6JnBqB,UAAY,SAAC3H,GACX,EAAKyH,eACL,EAAKzC,SAAS,CAAEa,IAAK7F,EAAEsH,OAAO3E,QAAS,WACrC,EAAKsC,oBA7JP,EAAKI,MAAQ,CACXQ,IAAK,YACLxG,UAAW,QACXC,UAAW,QACXH,aAAc,GACdgG,WAAY,GACZM,cAAe,IAAIxE,EAAc,CAC/BhD,MAAOqH,OAAOC,WACdpH,OAAQmH,OAAOE,eAInB,EAAKY,MAAQ7B,EAAI9C,YACjB,EAAK2E,MAAMpE,OAAO,EAAKqD,MAAMI,eAhBZ,E,0CAoKnB,WACE,OACE,sBAAKmC,UAAU,MAAf,UACE,wBAAQC,aAAc/I,KAAKuG,MAAMQ,IAAKiC,SAAUhJ,KAAK6I,UAArD,SACGI,EAAKlC,KAAI,SAACmC,EAAG3H,GACZ,OAAO,iCAAiB2H,GAAJ3H,QAGxB,wBAAQwH,aAAc/I,KAAKuG,MAAMhG,UAAWyI,SAAUhJ,KAAKuI,gBAA3D,SACGlG,OAAOC,KAAKtC,KAAKuG,MAAMlG,cAAc0G,KAAI,SAACoC,EAAG5H,GAC5C,OAAO,iCAAiB4H,GAAJ5H,QAGxB,yBAAQwH,aAAc/I,KAAKuG,MAAM/F,UAAWwI,SAAUhJ,KAAK0I,gBAA3D,UACE,wBAAQ7E,MAAM,OAAd,kBACA,wBAAQA,MAAM,QAAd,sBAEF,wBAAQgB,GAAG,QAAQ1F,MAAM,OAAOE,OAAO,e,GAtL7ByC,aCTHsH,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBtE,MAAK,YAAkD,IAA/CuE,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFlD,SAASC,eAAe,SAM1BuC,M","file":"static/js/main.85a420e2.chunk.js","sourcesContent":["class SpriteSheet\n{\n  constructor(canvas, url, spriteWidth, spriteHeight) {\n    this.sheet = new Image();\n    this.sheet.src = url;\n    this.spriteWidth = spriteWidth;\n    this.spriteHeight = spriteHeight;\n    this.canvas = canvas;\n    this.context = canvas.getContext(\"2d\");\n  }\n\n  /*\n   *  spriteX: column in sprite sheet\n   *  spriteY: row in sprite sheet\n   *  x, y: Canvas coordinates\n   *  scale: Shrink or enlarge sprite\n   */\n  draw = (spriteX, spriteY, x, y, options = {}) => {\n    if(options.scale === undefined) options.scale = 1;\n\n    let xScale = 1, xTranslate = 0;\n    let yScale = 1, yTranslate = 0;\n    let newX = x, newY = y;\n\n    if(options.flipHorizontal === true) {\n      xScale = -1;\n      xTranslate = this.canvas.width;\n      newX = this.canvas.width - x - this.spriteWidth;\n    }\n\n    if(options.flipVertical === true) {\n      yScale = -1;\n      yTranslate = this.canvas.height;\n      newY = this.canvas.height - y - this.spriteHeight;\n    }\n\n    if(options.flipDiagonal) {\n      this.context.save();\n      this.context.translate(x, y);\n      this.context.rotate(270 * (Math.PI / 180));\n      this.context.drawImage(this.sheet,\n        (spriteX * this.spriteWidth), (spriteY * this.spriteHeight),\n        this.spriteWidth, this.spriteHeight,\n        -this.spriteWidth, 0,\n        this.spriteWidth * options.scale, this.spriteHeight * options.scale\n      );\n      this.context.restore();\n      return;\n    }\n\n    if(options.flipVertical || options.flipHorizontal) {\n      this.context.save();\n      this.context.translate(xTranslate, yTranslate);\n      this.context.scale(xScale, yScale);\n      this.context.drawImage(this.sheet,\n        (spriteX * this.spriteWidth), (spriteY * this.spriteHeight),\n        this.spriteWidth, this.spriteHeight,\n        newX, newY,\n        this.spriteWidth * options.scale, this.spriteHeight * options.scale\n      );\n      this.context.restore();\n    } else {\n      this.context.drawImage(this.sheet,\n        (spriteX * this.spriteWidth), (spriteY * this.spriteHeight),\n        this.spriteWidth, this.spriteHeight,\n        x, y,\n        this.spriteWidth * options.scale, this.spriteHeight * options.scale\n      );\n    }\n  }\n};\n\nexport default SpriteSheet;\n","import SpriteSheet from './SpriteSheet';\n\nclass SpriteAnimation\n{\n  constructor(canvas, url, spriteWidth, spriteHeight, characterMap) {\n    this.sheet = new SpriteSheet(canvas, url, spriteWidth, spriteHeight);\n    this.frame = 0;\n    this.animation = \"\";\n    this.direction = \"\";\n    this.repeat = \"\";\n    this.loop = [];\n    this.characterMap = characterMap;\n  }\n\n  animate = (animation, direction, x, y, scale) => {\n    let restart = false;\n\n    if(this.animation !== animation) {\n      this.animation = animation;\n      restart = true;\n    }\n\n    if(this.direction !== direction) {\n      this.direction = direction;\n      restart = true;\n    }\n\n    if(restart) {\n      this.frame = 0;\n      this.loop = [];\n\n      let charMap = this.characterMap[animation];\n      let animations = [];\n      if(Array.isArray(charMap)) {\n        // No direction\n        this.repeat = charMap[0];\n        animations = charMap[1];\n      } else {\n        this.repeat = charMap[direction][0];\n        animations = charMap[direction][1];\n      }\n\n      animations.forEach((e) => {\n        // subtracting 1 because character_map.json uses 1-based indexing\n\n        let [x, y] = e.split(\",\");\n        if(x.search(\"-\") !== -1) {\n          // multiple x coords in one entry, split them up\n          let [startX, endX] = x.split(\"-\");\n          for(let i = startX; i <= endX; i++) {\n            this.loop.push({ x: (i - 1), y: (y - 1) });\n          }\n        } else {\n          this.loop.push({ x: (x - 1), y: (y - 1) });\n        }\n      });\n    }\n\n    this.draw(x, y, scale);\n  }\n\n  /*\n   *  x, y: Canvas coordinates\n   *  scale: Shrink or enlarge sprite\n   */\n  draw = (x, y, scale) => {\n    if(this.loop.length === 0) return;\n\n    this.sheet.draw(this.loop[this.frame].x, this.loop[this.frame].y, x, y, scale);\n    this.frame++;\n\n    if(this.frame === this.loop.length) this.frame = 0;\n  }\n};\n\nexport default SpriteAnimation;\n","import { Component } from \"@metaverse-systems/libecs-js\";\nimport SpriteAnimation from \"./SpriteAnimation\";\n\nclass SpriteComponent extends Component\n{\n  constructor(config) {\n    super(config);\n    this.sprite = new SpriteAnimation(config.canvas, config.url, config.width, config.height, config.characterMap);\n    this.Type = \"SpriteComponent\";\n  }\n}\n\nclass TilesheetComponent extends Component\n{\n  constructor(config) {\n    super(config);\n    this.Type = \"TilesheetComponent\";\n  }\n}\n\nclass TileComponent extends Component\n{\n  constructor(config) {\n    super(config);\n    this.tilesheet = config.tilesheet;\n    this.width = config.width;\n    this.height = config.height;\n    this.x = config.x;\n    this.y = config.y;\n    this.options = config.options;\n    this.Type = \"TileComponent\";\n  }\n}\n\nclass PositionComponent extends Component\n{\n  constructor(config) {\n    super(config);\n    this.x = config.x;\n    this.y = config.y;\n    this.Type = \"PositionComponent\";\n  }\n}\n\nexport {\n  SpriteComponent,\n  PositionComponent,\n  TileComponent,\n  TilesheetComponent\n};\n","import { System } from '@metaverse-systems/libecs-js';\nimport SpriteSheet from './SpriteSheet';\n\nclass DrawingSystem extends System\n{\n  constructor(config)\n  {\n    if(config === undefined) {\n      config = {};\n    }\n\n    super(config);\n    this.Handle = \"DrawingSystem\";\n    this.tilesheets = {};\n  }\n\n  ConfigUpdate = (config) => {\n    Object.keys(config).forEach((key) => {\n      this.config[key] = config[key];\n    });\n  }\n\n  Update = () => {\n    if(this.config.board === undefined) return;\n    let ctx = this.config.board.getContext(\"2d\");\n\n    ctx.clearRect(0, 0, this.config.board.width, this.config.board.height);\n\n    if(this.Container.Components[\"TilesheetComponent\"] !== undefined)\n    Object.keys(this.Container.Components[\"TilesheetComponent\"]).forEach((entity) => {\n      let tilesheet = this.Container.Components[\"TilesheetComponent\"][entity];\n\n      if(this.tilesheets[tilesheet.url] !== undefined) return;\n      this.tilesheets[tilesheet.url] = new SpriteSheet(this.config.board, tilesheet.url, \n                                                       tilesheet.width, tilesheet.height); \n    });\n\n    if(this.Container.Components[\"TileComponent\"] !== undefined)\n    Object.keys(this.Container.Components[\"TileComponent\"]).forEach((entity) => {\n      let tile = this.Container.Components[\"TileComponent\"][entity];\n      let pos = this.Container.Components[\"PositionComponent\"][entity];\n      let sheet = this.tilesheets[tile.tilesheet];\n\n      sheet.draw(tile.x, tile.y, pos.x * tile.width, pos.y * tile.height, tile.options);\n    });\n\n    if(this.Container.Components[\"SpriteComponent\"] !== undefined)\n    Object.keys(this.Container.Components[\"SpriteComponent\"]).forEach((entity) => {\n      let sprite = this.Container.Components[\"SpriteComponent\"][entity];\n      let pos = this.Container.Components[\"PositionComponent\"][entity];\n\n\n      if(sprite.sprite) {\n        sprite.sprite.animate(sprite.animation, sprite.direction, pos.x, pos.y, {});\n      }\n    });\n  }\n}\n\nexport default DrawingSystem;\n","const pako = require('pako');\n\nclass tmx2json\n{\n  constructor(url) {\n    fetch(url)\n    .then((response) => response.text())\n    .then((data) => {\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(data, \"text/xml\");\n      const tmx_map = xmlDoc.getElementsByTagName(\"map\")[0];\n      for(let i = 0; i < tmx_map.attributes.length; i++) {\n        let name = tmx_map.attributes[i].name;\n        let value = tmx_map.attributes[i].textContent;\n\n        if(name === \"version\") continue;\n        this[name] = value;\n      }\n\n      this.tilesets = [];\n      this.layers = [];\n\n      for(let i = 0; i < tmx_map.childNodes.length; i++) {\n        let nodeName = tmx_map.childNodes[i].nodeName;\n        switch(nodeName)\n        {\n          case \"properties\":\n            this.properties = new Properties(tmx_map.childNodes[i]);\n            break;\n          case \"tileset\":\n            this.tilesets.push(new Tileset(tmx_map.childNodes[i]));\n            break;\n          case \"layer\":\n            this.layers.push(new Layer(tmx_map.childNodes[i]));\n            break;\n          case \"#text\":\n            break;\n          default:\n            console.log(\"Unknown node \" + nodeName);\n            break;\n        }\n      }\n    });\n  }\n}\n\nclass Properties\n{\n  constructor(xml) {\n    for(let i = 0; i < xml.childNodes.length; i++) {\n      let nodeName = xml.childNodes[i].nodeName;\n      switch(nodeName)\n      {\n        case \"property\":\n          let attr = xml.childNodes[i].attributes;\n          for(let j = 0; j < attr.length; j++) {\n            let name = attr[j].name;\n            let value = attr[j].textContent;\n\n            this[name] = value;\n          }\n          break;\n        case \"#text\":\n          break;\n        default:\n          console.log(\"Unknown node \" + nodeName);\n          break;\n      }\n    }\n  }\n}\n\nclass Tileset\n{\n  constructor(xml) {\n    for(let i = 0; i < xml.attributes.length; i++) {\n      let name = xml.attributes[i].name;\n      let value = xml.attributes[i].textContent;\n\n      this[name] = value;\n    }\n\n    for(let i = 0; i < xml.childNodes.length; i++) {\n      let nodeName = xml.childNodes[i].nodeName;\n      switch(nodeName)\n      {\n        case \"properties\":\n          this.properties = new Properties(xml.childNodes[i]);\n          break;\n        case \"image\":\n          this.image = new TMX_Image(xml.childNodes[i]);\n          break;\n        case \"#text\":\n          break;\n        default:\n          console.log(\"Tileset: Unknown node \" + nodeName);\n          break;\n      }\n    }\n  }\n}\n\nclass Layer\n{\n  constructor(xml) {\n    for(let i = 0; i < xml.attributes.length; i++) {\n      let name = xml.attributes[i].name;\n      let value = xml.attributes[i].textContent;\n\n      this[name] = value;\n    }\n\n    for(let i = 0; i < xml.childNodes.length; i++) {\n      let nodeName = xml.childNodes[i].nodeName;\n      switch(nodeName)\n      {\n        case \"#text\":\n          break;\n        case \"data\":\n          this.tiles = new TMX_Data(xml.childNodes[i]).tiles;\n          break;\n        default:\n          console.log(\"Tileset: Unknown node \" + nodeName);\n          break;\n      }\n    }\n  }\n}\n\nclass TMX_Data\n{\n  constructor(xml) { \n    for(let i = 0; i < xml.attributes.length; i++) {\n      let name = xml.attributes[i].name;\n      let value = xml.attributes[i].textContent;\n\n      this[name] = value;\n    }\n\n    let compressedData = atob(xml.innerHTML);\n    let data = pako.inflate(compressedData);\n\n    this.tiles = [];\n\n    for(let i = 0; i < data.length; i += 4) {\n      let value = (data[i + 3] << 24)\n                + (data[i + 2] << 16)\n                + (data[i + 1] << 8)\n                + data[i + 0];\n\n      let tile = {};\n      if(value & 0x80000000) {\n        tile.flipHorizontal = true;\n        value ^= 0x80000000;\n      }\n\n      if(value & 0x40000000) {\n        tile.flipVertical = true;\n        value ^= 0x40000000;\n      } \n\n      if(value & 0x20000000) {\n        tile.flipDiagonal = true;\n        value ^= 0x20000000;\n      }\n      tile.id = value - 1;\n      \n      this.tiles.push(tile);\n    }\n  }\n}\n\nclass TMX_Image\n{\n  constructor(xml) {\n    for(let i = 0; i < xml.attributes.length; i++) {\n      let name = xml.attributes[i].name;\n      let value = xml.attributes[i].textContent;\n\n      this[name] = value;\n    }\n  }\n}\n\nexport default tmx2json;\n","import React, { Component } from \"react\";\nimport './App.css';\nimport { Manager } from \"@metaverse-systems/libecs-js\";\nimport { SpriteComponent, PositionComponent, TileComponent, TilesheetComponent } from \"./Components\";\nimport DrawingSystem from \"./DrawingSystem\";\nimport tmx2json from \"./tmx2json\";\nimport Maps from \"./maps.json\";\n\nconst ECS = new Manager();\n\nconst baseURL = \"https://raw.githubusercontent.com/hawkthorne/hawkthorne-journey/master\";\nconst characterBaseURL = baseURL + \"/src/characters/\";\nconst characterImagesBaseURL = baseURL + \"/src/images/characters/\";\nconst characterMapURL = baseURL + \"/src/character_map.json\";\nconst characterNames = [\n  \"abed\", \"britta\", \"chang\", \"duncan\", \"garrett\", \"guzman\", \"leonard\", \"rich\",     \"troy\", \"vicedean\",\n  \"annie\", \"buddy\", \"dean\", \"fatneil\", \"gilbert\", \"jeff\", \"pierce\", \"shirley\", \"vaughn\", \"vicki\"\n];\n\nconst costume = \"base\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      map: \"studyroom\",\n      animation: \"dance\",\n      direction: \"right\",\n      characterMap: {},\n      characters: {},\n      drawingSystem: new DrawingSystem({\n        width: window.innerWidth,\n        height: window.innerHeight\n      })\n    };\n\n    this.world = ECS.Container();\n    this.world.System(this.state.drawingSystem);\n  }\n\n  componentDidMount = () => {\n    this.handleResize();\n    fetch(characterMapURL)\n    .then((response) => response.json())\n    .then((data) => {\n      this.setState({ characterMap: data }, () => {\n        this.initializeMap();\n        this.initializeCharacters();\n      });\n    });\n\n    characterNames.forEach((name) => {\n      let cURL = characterBaseURL + name + \".json\";\n      fetch(cURL)\n      .then((response) => response.json())\n      .then((data) => {\n        let characters = Object.assign({}, this.state.characters);\n        characters[name] = data;\n        this.setState({ characters: characters });\n      });\n    });\n  }\n\n  handleResize = () => {\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n\n    if(this.state.drawingSystem !== null) {\n      this.state.drawingSystem.ConfigUpdate({ height: height, width: width, board: document.getElementById('board') });\n    }\n  }\n\n  initializeMap = () => {\n    let t = new tmx2json(baseURL + \"/src/maps/\" + this.state.map + \".tmx\");\n\n    setTimeout(() => {\n      t.layers.forEach((layer) => {\n        this.buildLayer(layer, t.tilesets[0]);\n      });\n\n    }, 500);\n  }\n\n  initializeCharacters = () => {\n    let canvas = document.getElementById('board');\n    let x = 0;\n    let y = 400;\n\n    characterNames.forEach((c) => {\n      let spriteURL = characterImagesBaseURL + c + \"/\" + costume + \".png\";\n      let e = this.world.Entity();\n      e.Component(new PositionComponent({ x: x, y: y }));\n      e.Component(new SpriteComponent({ canvas: canvas, url: spriteURL, width: 48, height: 48, \n        characterMap: this.state.characterMap, animation: this.state.animation, direction: this.state.direction }));\n\n      x += 50;\n      if(x > 450) {\n        x = 0;\n        y += 50;\n      }\n    });\n\n    console.log(this.world.Export());\n    this.world.Start(250);\n  }\n\n  buildLayer = (layer, tileset) => {\n    let tilesheet = baseURL + \"/src/images/\" + tileset.image.source;\n    let tileWidth = tileset.tilewidth;\n    let tileHeight = tileset.tileheight;\n    let tilesheetCols = tileset.image.width / tileWidth;\n\n    let e = this.world.Entity();\n    e.Component(new TilesheetComponent({ url: tilesheet, width: tileWidth, height: tileHeight }));\n\n    let maxCols = layer.width;\n    let maxRows = layer.height;\n\n    let index = 0;\n    for(let y = 0; y < maxRows; y++)\n    {\n      for(let x = 0; x < maxCols; x++)\n      {\n        let tileId = layer.tiles[index].id;\n        if(tileId === -1)\n        {\n            index++;\n            continue;\n        }\n\n        let tX = tileId % tilesheetCols;\n        let tY = (tileId - tX) / tilesheetCols;\n\n        let options = {};\n        if(layer.tiles[index].flipHorizontal === true) {\n          options.flipHorizontal = true;\n        }\n        if(layer.tiles[index].flipVertical === true) {\n          options.flipVertical = true;\n        }\n        if(layer.tiles[index].flipDiagonal === true) {\n          options.flipDiagonal = true;\n        }\n        e = this.world.Entity();\n        e.Component(new PositionComponent({ x: x, y: y }));\n        e.Component(new TileComponent({ tilesheet: tilesheet, width: tileWidth, height: tileHeight, x: tX, y: tY, options: options }));\n\n        index++;\n      }\n    }\n  }\n\n  changeAnimation = (e) => {\n    this.setState({ animation: e.target.value }, () => {\n      this.updateSpriteComponent();\n    });\n  }\n\n  changeDirection = (e) => {\n    this.setState({ direction: e.target.value }, () => {\n      this.updateSpriteComponent();\n    });\n  }\n\n  updateSpriteComponent = () => {\n    Object.keys(this.world.Components[\"SpriteComponent\"]).forEach((entity) => {\n      this.world.Components[\"SpriteComponent\"][entity].animation = this.state.animation;\n      this.world.Components[\"SpriteComponent\"][entity].direction = this.state.direction;\n    });\n  }\n\n  destroyTiles = () => {\n    Object.keys(this.world.Components[\"TileComponent\"]).forEach((entity) => {\n      this.world.Entity(entity).destroy();\n    });\n    console.log(this.world.Export());\n  }\n\n  changeMap = (e) => {\n    this.destroyTiles();\n    this.setState({ map: e.target.value }, () => {\n      this.initializeMap();\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <select defaultValue={this.state.map} onChange={this.changeMap}>\n          {Maps.map((m, i) => {\n            return <option key={i}>{m}</option>\n          })}\n        </select>\n        <select defaultValue={this.state.animation} onChange={this.changeAnimation}>\n          {Object.keys(this.state.characterMap).map((a, i) => {\n            return <option key={i}>{a}</option>\n          })}\n        </select>\n        <select defaultValue={this.state.direction} onChange={this.changeDirection}>\n          <option value=\"left\">Left</option>\n          <option value=\"right\">Right</option>\n        </select>\n        <canvas id=\"board\" width=\"1280\" height=\"720\" />\n      </div>\n    );\n  }\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}