{"version":3,"sources":["SpriteSheet.js","SpriteAnimation.js","Components.js","DrawingSystem.js","tmx2json.js","App.js","reportWebVitals.js","index.js"],"names":["SpriteSheet","canvas","url","spriteWidth","spriteHeight","draw","spriteX","spriteY","x","y","options","undefined","scale","xScale","xTranslate","yScale","yTranslate","newX","newY","flipHorizontal","width","flipVertical","height","flipDiagonal","context","save","translate","rotate","Math","PI","drawImage","sheet","restore","this","Image","src","getContext","SpriteAnimation","characterMap","animate","animation","direction","restart","frame","loop","charMap","animations","Array","isArray","repeat","forEach","e","split","search","startX","endX","i","push","length","SpriteComponent","config","sprite","Type","Component","StaticSpriteComponent","TilesheetComponent","TileComponent","tilesheet","PositionComponent","PolygonComponent","points","PolylineComponent","RectangleComponent","color","DrawingSystem","Init","Container","Components","ConfigUpdate","Object","keys","key","Update","board","ctx","clearRect","entity","rect","pos","beginPath","fillStyle","fill","tilesheets","Entity","destroy","tile","poly","strokeStyle","moveTo","point","parseInt","lineTo","closePath","stroke","Handle","System","pako","require","ObjectGroup","xml","attributes","name","value","textContent","objects","childNodes","nodeName","TMX_Object","console","log","polyline","Polyline","polygon","Polygon","properties","ObjectProperties","temp","Properties","attr","j","Tileset","image","TMX_Image","Layer","tiles","TMX_Data","compressedData","atob","innerHTML","data","inflate","id","tmx2json","fetch","then","response","text","tmx_map","DOMParser","parseFromString","getElementsByTagName","tilesets","layers","objectgroups","ECS","Manager","baseURL","baseMusicURL","characterNames","App","props","componentDidMount","handleResize","json","setState","initializeMap","characters","assign","state","window","innerWidth","innerHeight","drawingSystem","document","getElementById","t","map","setTimeout","red","world","tilewidth","tileheight","toString","green","blue","soundtrackURL","soundtrack","track","music","play","layer","buildLayer","group","o","buildObject","initializePlayer","spriteURL","playerCharacter","playerCostume","levelStart","type","buildPolyline","buildPolygon","buildSprite","flip","tileset","source","tileWidth","tileHeight","tilesheetCols","maxCols","maxRows","index","tileId","tX","tY","changeAnimation","target","updateSpriteComponent","changeDirection","destroyMap","changeMap","volume","Start","style","float","htmlFor","defaultValue","onChange","Maps","m","a","controls","onVolumeChanged","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.b3d4ba1c.chunk.js","sourcesContent":["class SpriteSheet\n{\n  constructor(canvas, url, spriteWidth, spriteHeight) {\n    this.sheet = new Image();\n    this.sheet.src = url;\n    this.spriteWidth = spriteWidth;\n    this.spriteHeight = spriteHeight;\n    this.canvas = canvas;\n    this.context = canvas.getContext(\"2d\");\n  }\n\n  /*\n   *  spriteX: column in sprite sheet\n   *  spriteY: row in sprite sheet\n   *  x, y: Canvas coordinates\n   *  scale: Shrink or enlarge sprite\n   */\n  draw = (spriteX, spriteY, x, y, options = {}) => {\n    if(options.scale === undefined) options.scale = 1;\n\n    let xScale = 1, xTranslate = 0;\n    let yScale = 1, yTranslate = 0;\n    let newX = x, newY = y;\n\n    if(options.flipHorizontal === true) {\n      xScale = -1;\n      xTranslate = this.canvas.width;\n      newX = this.canvas.width - x - this.spriteWidth;\n    }\n\n    if(options.flipVertical === true) {\n      yScale = -1;\n      yTranslate = this.canvas.height;\n      newY = this.canvas.height - y - this.spriteHeight;\n    }\n\n    if(options.flipDiagonal) {\n      this.context.save();\n      this.context.translate(x, y);\n      this.context.rotate(270 * (Math.PI / 180));\n      this.context.drawImage(this.sheet,\n        (spriteX * this.spriteWidth), (spriteY * this.spriteHeight),\n        this.spriteWidth, this.spriteHeight,\n        -this.spriteWidth, 0,\n        this.spriteWidth * options.scale, this.spriteHeight * options.scale\n      );\n      this.context.restore();\n      return;\n    }\n\n    if(options.flipVertical || options.flipHorizontal) {\n      this.context.save();\n      this.context.translate(xTranslate, yTranslate);\n      this.context.scale(xScale, yScale);\n      this.context.drawImage(this.sheet,\n        (spriteX * this.spriteWidth), (spriteY * this.spriteHeight),\n        this.spriteWidth, this.spriteHeight,\n        newX, newY,\n        this.spriteWidth * options.scale, this.spriteHeight * options.scale\n      );\n      this.context.restore();\n    } else {\n      this.context.drawImage(this.sheet,\n        (spriteX * this.spriteWidth), (spriteY * this.spriteHeight),\n        this.spriteWidth, this.spriteHeight,\n        x, y,\n        this.spriteWidth * options.scale, this.spriteHeight * options.scale\n      );\n    }\n  }\n};\n\nexport default SpriteSheet;\n","import SpriteSheet from './SpriteSheet';\n\nclass SpriteAnimation\n{\n  constructor(canvas, url, spriteWidth, spriteHeight, characterMap) {\n    this.sheet = new SpriteSheet(canvas, url, spriteWidth, spriteHeight);\n    this.frame = 0;\n    this.animation = \"\";\n    this.direction = \"\";\n    this.repeat = \"\";\n    this.loop = [];\n    this.characterMap = characterMap;\n  }\n\n  animate = (animation, direction, x, y, scale) => {\n    let restart = false;\n\n    if(this.animation !== animation) {\n      this.animation = animation;\n      restart = true;\n    }\n\n    if(this.direction !== direction) {\n      this.direction = direction;\n      restart = true;\n    }\n\n    if(restart) {\n      this.frame = 0;\n      this.loop = [];\n\n      let charMap = this.characterMap[animation];\n      let animations = [];\n      if(Array.isArray(charMap)) {\n        // No direction\n        this.repeat = charMap[0];\n        animations = charMap[1];\n      } else {\n        this.repeat = charMap[direction][0];\n        animations = charMap[direction][1];\n      }\n\n      animations.forEach((e) => {\n        // subtracting 1 because character_map.json uses 1-based indexing\n\n        let [x, y] = e.split(\",\");\n        if(x.search(\"-\") !== -1) {\n          // multiple x coords in one entry, split them up\n          let [startX, endX] = x.split(\"-\");\n          for(let i = startX; i <= endX; i++) {\n            this.loop.push({ x: (i - 1), y: (y - 1) });\n          }\n        } else {\n          this.loop.push({ x: (x - 1), y: (y - 1) });\n        }\n      });\n    }\n\n    this.draw(x, y, scale);\n  }\n\n  /*\n   *  x, y: Canvas coordinates\n   *  scale: Shrink or enlarge sprite\n   */\n  draw = (x, y, scale) => {\n    if(this.loop.length === 0) return;\n\n    this.sheet.draw(this.loop[this.frame].x, this.loop[this.frame].y, x, y, scale);\n    this.frame++;\n\n    if(this.frame === this.loop.length) this.frame = 0;\n  }\n};\n\nexport default SpriteAnimation;\n","import { Component } from \"@metaverse-systems/libecs-js\";\nimport SpriteAnimation from \"./SpriteAnimation\";\nimport SpriteSheet from \"./SpriteSheet\";\n\nclass SpriteComponent extends Component\n{\n  constructor(config) {\n    super(config);\n    this.sprite = new SpriteAnimation(config.canvas, config.url, config.width, config.height, config.characterMap);\n    this.Type = \"SpriteComponent\";\n  }\n}\n\nclass StaticSpriteComponent extends Component\n{\n  constructor(config) {\n    super(config);\n    this.sprite = new SpriteSheet(config.canvas, config.url, config.width, config.height);\n    this.Type = \"StaticSpriteComponent\";\n  }\n}\n\nclass TilesheetComponent extends Component\n{\n  constructor(config) {\n    super(config);\n    this.Type = \"TilesheetComponent\";\n  }\n}\n\nclass TileComponent extends Component\n{\n  constructor(config) {\n    super(config);\n    this.tilesheet = config.tilesheet;\n    this.width = config.width;\n    this.height = config.height;\n    this.x = config.x;\n    this.y = config.y;\n    this.options = config.options;\n    this.Type = \"TileComponent\";\n  }\n}\n\nclass PositionComponent extends Component\n{\n  constructor(config) {\n    super(config);\n    this.x = config.x;\n    this.y = config.y;\n    this.Type = \"PositionComponent\";\n  }\n}\n\nclass PolygonComponent extends Component\n{\n  constructor(config) {\n    super(config);\n    this.points = config.points;\n    this.Type = \"PolygonComponent\";\n  }\n}\n\nclass PolylineComponent extends Component\n{\n  constructor(config) {\n    super(config);\n    this.points = config.points;\n    this.Type = \"PolylineComponent\";\n  }\n}\n\nclass RectangleComponent extends Component\n{\n  constructor(config) {\n    super(config);\n    this.width = config.width;\n    this.height = config.height;\n    this.color = config.color;\n    this.Type = \"RectangleComponent\";\n  }\n}\n\nexport {\n  SpriteComponent,\n  StaticSpriteComponent,\n  PositionComponent,\n  TileComponent,\n  TilesheetComponent,\n  PolygonComponent,\n  PolylineComponent,\n  RectangleComponent\n};\n","import { System } from '@metaverse-systems/libecs-js';\nimport SpriteSheet from './SpriteSheet';\n\nclass DrawingSystem extends System\n{\n  constructor(config)\n  {\n    if(config === undefined) {\n      config = {};\n    }\n\n    super(config);\n    this.Handle = \"DrawingSystem\";\n    this.tilesheets = {};\n  }\n\n  Init = () => {\n    this.Container.Components[\"TilesheetComponent\"] = {};\n    this.Container.Components[\"TileComponent\"] = {};\n    this.Container.Components[\"PositionComponent\"] = {};\n    this.Container.Components[\"SpriteComponent\"] = {};\n    this.Container.Components[\"StaticSpriteComponent\"] = {};\n    this.Container.Components[\"PolygonComponent\"] = {};\n    this.Container.Components[\"RectangleComponent\"] = {};\n  }\n\n  ConfigUpdate = (config) => {\n    Object.keys(config).forEach((key) => {\n      this.config[key] = config[key];\n    });\n  }\n\n  Update = () => {\n    if(this.config.board === undefined) return;\n    let ctx = this.config.board.getContext(\"2d\");\n\n    ctx.clearRect(0, 0, this.config.board.width, this.config.board.height);\n\n    if(this.Container.Components[\"RectangleComponent\"] !== undefined) \n    Object.keys(this.Container.Components[\"RectangleComponent\"]).forEach((entity) => {\n      let rect = this.Container.Components[\"RectangleComponent\"][entity];\n      let pos = this.Container.Components[\"PositionComponent\"][entity];\n      ctx.beginPath();\n      ctx.fillStyle = rect.color;\n      ctx.rect(pos.x, pos.y, rect.width, rect.height);\n      ctx.fill();\n    });\n\n    if(this.Container.Components[\"TilesheetComponent\"] !== undefined)\n    Object.keys(this.Container.Components[\"TilesheetComponent\"]).forEach((entity) => {\n      let tilesheet = this.Container.Components[\"TilesheetComponent\"][entity];\n\n      if(this.tilesheets[tilesheet.url] !== undefined) return;\n      this.tilesheets[tilesheet.url] = new SpriteSheet(this.config.board, tilesheet.url, \n                                                       tilesheet.width, tilesheet.height); \n\n      this.Container.Entity(entity).destroy();\n    });\n\n    if(this.Container.Components[\"TileComponent\"] !== undefined)\n    Object.keys(this.Container.Components[\"TileComponent\"]).forEach((entity) => {\n      let tile = this.Container.Components[\"TileComponent\"][entity];\n      let pos = this.Container.Components[\"PositionComponent\"][entity];\n      let sheet = this.tilesheets[tile.tilesheet];\n\n      sheet.draw(tile.x, tile.y, pos.x * tile.width, pos.y * tile.height, tile.options);\n    });\n\n    if(this.Container.Components[\"StaticSpriteComponent\"] !== undefined)\n    Object.keys(this.Container.Components[\"StaticSpriteComponent\"]).forEach((entity) => {\n      let sprite = this.Container.Components[\"StaticSpriteComponent\"][entity];\n      let pos = this.Container.Components[\"PositionComponent\"][entity];\n\n      if(sprite.sprite) {\n        sprite.sprite.draw(0, 0, pos.x, pos.y, sprite.options);\n      }\n    });\n\n    if(this.Container.Components[\"SpriteComponent\"] !== undefined)\n    Object.keys(this.Container.Components[\"SpriteComponent\"]).forEach((entity) => {\n      let sprite = this.Container.Components[\"SpriteComponent\"][entity];\n      let pos = this.Container.Components[\"PositionComponent\"][entity];\n\n      if(sprite.sprite) {\n        sprite.sprite.animate(sprite.animation, sprite.direction, pos.x, pos.y, {});\n      }\n    });\n\n    if(this.Container.Components[\"PolygonComponent\"] !== undefined)\n    Object.keys(this.Container.Components[\"PolygonComponent\"]).forEach((entity) => {\n      let poly = this.Container.Components[\"PolygonComponent\"][entity];\n      let pos = this.Container.Components[\"PositionComponent\"][entity];\n\n      ctx.strokeStyle = '#0f0';\n      ctx.beginPath();\n      ctx.moveTo(pos.x, pos.y);\n      poly.points.forEach((point) => {\n        let x = parseInt(point.x) + parseInt(pos.x);\n        let y = parseInt(point.y) + parseInt(pos.y);\n        ctx.lineTo(x, y);\n      });\n      ctx.lineTo(pos.x, pos.y);\n      ctx.closePath();\n      ctx.stroke();\n    });\n\n    if(this.Container.Components[\"PolylineComponent\"] !== undefined)\n    Object.keys(this.Container.Components[\"PolylineComponent\"]).forEach((entity) => {\n      let poly = this.Container.Components[\"PolylineComponent\"][entity];\n      let pos = this.Container.Components[\"PositionComponent\"][entity];\n\n      ctx.strokeStyle = '#f00';\n      ctx.beginPath();\n      ctx.moveTo(pos.x, pos.y);\n      poly.points.forEach((point) => {\n        let x = parseInt(point.x) + parseInt(pos.x);\n        let y = parseInt(point.y) + parseInt(pos.y);\n        ctx.lineTo(x, y);\n      });\n      ctx.lineTo(pos.x, pos.y);\n      ctx.closePath();\n      ctx.stroke();\n    });\n  }\n}\n\nexport default DrawingSystem;\n","const pako = require('pako');\n\nclass tmx2json\n{\n  constructor(url) {\n    fetch(url)\n    .then((response) => response.text())\n    .then((data) => {\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(data, \"text/xml\");\n      const tmx_map = xmlDoc.getElementsByTagName(\"map\")[0];\n      for(let i = 0; i < tmx_map.attributes.length; i++) {\n        let name = tmx_map.attributes[i].name;\n        let value = tmx_map.attributes[i].textContent;\n\n        if(name === \"version\") continue;\n        this[name] = value;\n      }\n\n      this.tilesets = [];\n      this.layers = [];\n      this.objectgroups = [];\n\n      for(let i = 0; i < tmx_map.childNodes.length; i++) {\n        let nodeName = tmx_map.childNodes[i].nodeName;\n        switch(nodeName)\n        {\n          case \"properties\":\n            this.properties = new ObjectProperties(tmx_map.childNodes[i]);\n            break;\n          case \"tileset\":\n            this.tilesets.push(new Tileset(tmx_map.childNodes[i]));\n            break;\n          case \"layer\":\n            this.layers.push(new Layer(tmx_map.childNodes[i]));\n            break;\n          case \"objectgroup\":\n            this.objectgroups.push(new ObjectGroup(tmx_map.childNodes[i]));\n            break;\n          case \"#text\":\n            break;\n          default:\n            console.log(\"Unknown node \" + nodeName);\n            break;\n        }\n      }\n    });\n  }\n}\n\nclass ObjectGroup\n{\n  constructor(xml) {\n    for(let i = 0; i < xml.attributes.length; i++) {\n      let name = xml.attributes[i].name;\n      let value = xml.attributes[i].textContent;\n\n      this[name] = value;\n    }\n\n    this.objects = [];\n    for(let i = 0; i < xml.childNodes.length; i++) {\n      let nodeName = xml.childNodes[i].nodeName;\n      switch(nodeName)\n      {\n        case \"object\":\n          this.objects.push(new TMX_Object(xml.childNodes[i]));\n          break;\n        case \"#text\":\n          break;\n        default:\n          console.log(\"ObjectGroup: Unknown node \" + nodeName);\n          break;\n      }\n    }\n  }\n}\n\nclass TMX_Object\n{\n  constructor(xml) { \n    for(let i = 0; i < xml.attributes.length; i++) {\n      let name = xml.attributes[i].name;\n      let value = xml.attributes[i].textContent;\n\n      this[name] = value;\n    }\n\n    for(let i = 0; i < xml.childNodes.length; i++) {\n      let nodeName = xml.childNodes[i].nodeName;\n      switch(nodeName)\n      {\n        case \"polyline\":\n          this.polyline = new Polyline(xml.childNodes[i]);\n          break;\n        case \"polygon\":\n          this.polygon = new Polygon(xml.childNodes[i]);\n          break;\n        case \"properties\":\n          this.properties = new ObjectProperties(xml.childNodes[i]);\n          break;\n        case \"#text\":\n          break;\n        default:\n          console.log(\"TMX_Object: Unknown node \" + nodeName);\n          break;\n      }\n    }\n  }\n}\n\nclass Polygon\n{\n  constructor(xml) {\n    this.points = [];\n    let temp = {};\n    for(let i = 0; i < xml.attributes.length; i++) {\n      let name = xml.attributes[i].name;\n      let value = xml.attributes[i].textContent;\n      temp[name] = value;\n    }\n\n    if(temp[\"points\"] === undefined) return;\n\n    let points = temp[\"points\"].split(\" \");\n    points.forEach((point) => {\n      let [x, y] = point.split(\",\");\n      this.points.push({ x: x - 0, y: y - 0 });\n    });\n  }\n}\n\nclass Polyline\n{\n  constructor(xml) {\n    this.points = new Polygon(xml).points;\n  }\n}\n\nclass Properties\n{\n  constructor(xml) {\n    for(let i = 0; i < xml.childNodes.length; i++) {\n      let nodeName = xml.childNodes[i].nodeName;\n      switch(nodeName)\n      {\n        case \"property\":\n          let attr = xml.childNodes[i].attributes;\n          for(let j = 0; j < attr.length; j++) {\n            let name = attr[j].name;\n            let value = attr[j].textContent;\n            this[name] = value;\n          }\n          break;\n        case \"#text\":\n          break;\n        default:\n          console.log(\"Unknown node \" + nodeName);\n          break;\n      }\n    }\n  }\n}\n\nclass ObjectProperties\n{\n  constructor(xml) {\n    for(let i = 0; i < xml.childNodes.length; i++) {\n      let nodeName = xml.childNodes[i].nodeName;\n      switch(nodeName)\n      {\n        case \"property\":\n          let attr = xml.childNodes[i].attributes;\n          let name = \"\";\n          let value = \"\";\n          for(let j = 0; j < attr.length; j++) {\n            if(attr[j].name === \"name\") {\n              name = attr[j].textContent;\n            }\n            if(attr[j].name === \"value\") {\n              value = attr[j].textContent;\n            }\n          }\n          this[name] = value;\n          break;\n        case \"#text\":\n          break;\n        default:\n          console.log(\"Unknown node \" + nodeName);\n          break;\n      }\n    }\n  }\n}\n\nclass Tileset\n{\n  constructor(xml) {\n    for(let i = 0; i < xml.attributes.length; i++) {\n      let name = xml.attributes[i].name;\n      let value = xml.attributes[i].textContent;\n\n      this[name] = value;\n    }\n\n    for(let i = 0; i < xml.childNodes.length; i++) {\n      let nodeName = xml.childNodes[i].nodeName;\n      switch(nodeName)\n      {\n        case \"properties\":\n          this.properties = new Properties(xml.childNodes[i]);\n          break;\n        case \"image\":\n          this.image = new TMX_Image(xml.childNodes[i]);\n          break;\n        case \"#text\":\n          break;\n        default:\n          console.log(\"Tileset: Unknown node \" + nodeName);\n          break;\n      }\n    }\n  }\n}\n\nclass Layer\n{\n  constructor(xml) {\n    for(let i = 0; i < xml.attributes.length; i++) {\n      let name = xml.attributes[i].name;\n      let value = xml.attributes[i].textContent;\n\n      this[name] = value;\n    }\n\n    for(let i = 0; i < xml.childNodes.length; i++) {\n      let nodeName = xml.childNodes[i].nodeName;\n      switch(nodeName)\n      {\n        case \"#text\":\n          break;\n        case \"data\":\n          this.tiles = new TMX_Data(xml.childNodes[i]).tiles;\n          break;\n        case \"properties\":\n          this.properties = new Properties(xml.childNodes[i]);\n          break;\n        default:\n          console.log(\"Layer: Unknown node \" + nodeName);\n          break;\n      }\n    }\n  }\n}\n\nclass TMX_Data\n{\n  constructor(xml) { \n    for(let i = 0; i < xml.attributes.length; i++) {\n      let name = xml.attributes[i].name;\n      let value = xml.attributes[i].textContent;\n\n      this[name] = value;\n    }\n\n    let compressedData = atob(xml.innerHTML);\n    let data = pako.inflate(compressedData);\n\n    this.tiles = [];\n\n    for(let i = 0; i < data.length; i += 4) {\n      let value = (data[i + 3] << 24)\n                + (data[i + 2] << 16)\n                + (data[i + 1] << 8)\n                + data[i + 0];\n\n      let tile = {};\n      if(value & 0x80000000) {\n        tile.flipHorizontal = true;\n        value ^= 0x80000000;\n      }\n\n      if(value & 0x40000000) {\n        tile.flipVertical = true;\n        value ^= 0x40000000;\n      } \n\n      if(value & 0x20000000) {\n        tile.flipDiagonal = true;\n        value ^= 0x20000000;\n      }\n      tile.id = value - 1;\n      \n      this.tiles.push(tile);\n    }\n  }\n}\n\nclass TMX_Image\n{\n  constructor(xml) {\n    for(let i = 0; i < xml.attributes.length; i++) {\n      let name = xml.attributes[i].name;\n      let value = xml.attributes[i].textContent;\n\n      this[name] = value;\n    }\n  }\n}\n\nexport default tmx2json;\n","import React, { Component } from \"react\";\nimport './App.css';\nimport ReactAudioPlayer from 'react-audio-player';\nimport { Manager } from \"@metaverse-systems/libecs-js\";\nimport { RectangleComponent, SpriteComponent, StaticSpriteComponent, \n         PositionComponent, TileComponent, TilesheetComponent, \n         PolygonComponent, PolylineComponent } from \"./Components\";\nimport DrawingSystem from \"./DrawingSystem\";\nimport tmx2json from \"./tmx2json\";\nimport Maps from \"./maps.json\";\n\nconst ECS = new Manager();\n\nconst baseURL = \"https://raw.githubusercontent.com/hawkthorne/hawkthorne-journey/master\";\nconst characterBaseURL = baseURL + \"/src/characters/\";\nconst characterImagesBaseURL = baseURL + \"/src/images/characters/\";\nconst characterMapURL = baseURL + \"/src/character_map.json\";\nconst baseMusicURL = baseURL + \"/src/audio/music/\";\n\nconst characterNames = [\n  \"abed\", \"britta\", \"chang\", \"duncan\", \"garrett\", \"guzman\", \"leonard\", \"rich\", \"troy\", \"vicedean\",\n  \"annie\", \"buddy\", \"dean\", \"fatneil\", \"gilbert\", \"jeff\", \"pierce\", \"shirley\", \"vaughn\", \"vicki\"\n];\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      music: \"\",\n      volume: 0.25,\n      map: \"studyroom\",\n      animation: \"idle\",\n      direction: \"right\",\n      characterMap: {},\n      characters: {},\n      drawingSystem: new DrawingSystem({\n        width: window.innerWidth,\n        height: window.innerHeight\n      }),\n      levelStart: { x: 0, y: 0 },\n      playerCharacter: \"annie\",\n      playerCostume: \"santa\"\n    };\n\n    this.world = ECS.Container();\n    this.world.System(this.state.drawingSystem);\n    this.world.Start(250);\n  }\n\n  componentDidMount = () => {\n    this.handleResize();\n    fetch(characterMapURL)\n    .then((response) => response.json())\n    .then((data) => {\n      this.setState({ characterMap: data }, () => {\n        this.initializeMap();\n      });\n    });\n\n    characterNames.forEach((name) => {\n      let cURL = characterBaseURL + name + \".json\";\n      fetch(cURL)\n      .then((response) => response.json())\n      .then((data) => {\n        let characters = Object.assign({}, this.state.characters);\n        characters[name] = data;\n        this.setState({ characters: characters });\n      });\n    });\n  }\n\n  handleResize = () => {\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n\n    if(this.state.drawingSystem !== null) {\n      this.state.drawingSystem.ConfigUpdate({ height: height, width: width, board: document.getElementById('board') });\n    }\n  }\n\n  initializeMap = () => {\n    let t = new tmx2json(baseURL + \"/src/maps/\" + this.state.map + \".tmx\");\n\n    setTimeout(() => {\n      console.log(t);\n\n      if(t.properties.red !== undefined) {\n        let e = this.world.Entity();\n        e.Component(new PositionComponent({ x: 0, y: 0 }));\n\n        let width = t.width * t.tilewidth;\n        let height = t.height * t.tileheight;\n        let color = \"#\" + parseInt(t.properties.red).toString(16) + parseInt(t.properties.green).toString(16) + parseInt(t.properties.blue).toString(16);\n        e.Component(new RectangleComponent({ width: width, height: height, color: color }));\n      }\n\n      let soundtrackURL = baseMusicURL + \"level.ogg\";\n      if(t.properties.soundtrack !== undefined) {\n        let track = t.properties.soundtrack;\n        if(track.search(\"ogg\") !== -1) {\n          soundtrackURL = baseURL + \"/src/\" + track;\n        } else {\n          soundtrackURL = baseMusicURL + t.properties.soundtrack + \".ogg\";\n        }\n      }\n\n      this.setState({ music: soundtrackURL }, () => {\n        document.getElementById('rap').play();\n      });\n\n      t.layers.forEach((layer) => {\n        this.buildLayer(layer, t.tilesets[0]);\n      });\n\n      t.objectgroups.forEach((group) => {\n        group.objects.forEach((o) => {\n          this.buildObject(o);\n        });\n      });\n\n      console.log(this.world);\n    }, 500);\n  }\n\n  initializePlayer = () => {\n    let canvas = document.getElementById('board');\n    let spriteURL = characterImagesBaseURL + this.state.playerCharacter + \"/\" + this.state.playerCostume + \".png\";\n\n    let e = this.world.Entity(\"player\");\n    e.Component(new PositionComponent(this.state.levelStart));\n    e.Component(new SpriteComponent({ canvas: canvas, url: spriteURL, width: 48, height: 48,\n      characterMap: this.state.characterMap, animation: this.state.animation, direction: this.state.direction }));\n  }\n\n  buildObject = (o) => {\n    if(o.type === \"sprite\") {\n      this.buildSprite(o);\n      return;\n    }\n\n    if(o.type === \"door\") {\n      if(o.name !== \"main\") return;\n      this.setState({ levelStart: { x: o.x - 0, y: o.y - 0 } }, () => {\n        this.initializePlayer();\n      });\n    }\n\n    if(o.polygon !== undefined) {\n      this.buildPolygon(o);\n      return;\n    }\n\n    if(o.polyline !== undefined) {\n      this.buildPolyline(o);\n      return;\n    }\n  }\n\n  buildPolygon = (o) => {\n    let e = this.world.Entity();\n    e.Component(new PositionComponent({ x: o.x, y: o.y }));\n    e.Component(new PolygonComponent({ points: o.polygon.points }));\n  }\n\n  buildPolyline = (o) => {\n    let e = this.world.Entity();\n    e.Component(new PositionComponent({ x: o.x, y: o.y }));\n    e.Component(new PolylineComponent({ points: o.polyline.points }));\n  }\n\n  buildSprite = (o) => {\n    let url = baseURL + \"/src/\" + o.properties.sheet;\n\n    let e = this.world.Entity();\n    e.Component(new PositionComponent({ x: o.x, y: o.y }));\n\n    let options = { flipHorizontal: o.properties.flip === \"true\" ? true : false };\n    e.Component(new StaticSpriteComponent({ canvas: document.getElementById('board'), url: url, width: o.properties.width,\n                                            height: o.properties.height, x: o.x, y: o.y, options: options }));\n  }\n\n  buildLayer = (layer, tileset) => {\n    let tilesheet = baseURL + \"/src/images/\" + tileset.image.source;\n    let tileWidth = tileset.tilewidth;\n    let tileHeight = tileset.tileheight;\n    let tilesheetCols = tileset.image.width / tileWidth;\n\n    let e = this.world.Entity();\n    e.Component(new TilesheetComponent({ url: tilesheet, width: tileWidth, height: tileHeight }));\n\n    let maxCols = layer.width;\n    let maxRows = layer.height;\n\n    let index = 0;\n    for(let y = 0; y < maxRows; y++)\n    {\n      for(let x = 0; x < maxCols; x++)\n      {\n        let tileId = layer.tiles[index].id;\n        if(tileId === -1)\n        {\n            index++;\n            continue;\n        }\n\n        let tX = tileId % tilesheetCols;\n        let tY = (tileId - tX) / tilesheetCols;\n\n        let options = {};\n        if(layer.tiles[index].flipHorizontal === true) {\n          options.flipHorizontal = true;\n        }\n        if(layer.tiles[index].flipVertical === true) {\n          options.flipVertical = true;\n        }\n        if(layer.tiles[index].flipDiagonal === true) {\n          options.flipDiagonal = true;\n        }\n        e = this.world.Entity();\n        e.Component(new PositionComponent({ x: x, y: y }));\n        e.Component(new TileComponent({ tilesheet: tilesheet, width: tileWidth, height: tileHeight, x: tX, y: tY, options: options }));\n\n        index++;\n      }\n    }\n  }\n\n  changeAnimation = (e) => {\n    this.setState({ animation: e.target.value }, () => {\n      this.updateSpriteComponent();\n    });\n  }\n\n  changeDirection = (e) => {\n    this.setState({ direction: e.target.value }, () => {\n      this.updateSpriteComponent();\n    });\n  }\n\n  updateSpriteComponent = () => {\n    Object.keys(this.world.Components[\"SpriteComponent\"]).forEach((entity) => {\n      this.world.Components[\"SpriteComponent\"][entity].animation = this.state.animation;\n      this.world.Components[\"SpriteComponent\"][entity].direction = this.state.direction;\n    });\n  }\n\n  destroyMap = () => {\n    Object.keys(this.world.Components[\"TileComponent\"]).forEach((entity) => {\n      this.world.Entity(entity).destroy();\n    });\n\n    Object.keys(this.world.Components[\"StaticSpriteComponent\"]).forEach((entity) => {\n      this.world.Entity(entity).destroy();\n    });\n\n    Object.keys(this.world.Components[\"PolygonComponent\"]).forEach((entity) => {\n      this.world.Entity(entity).destroy();\n    });\n\n    if(this.world.Components[\"PolylineComponent\"] !== undefined)\n    Object.keys(this.world.Components[\"PolylineComponent\"]).forEach((entity) => {\n      this.world.Entity(entity).destroy();\n    });\n\n    if(this.world.Components[\"RectangleComponent\"] !== undefined)\n    Object.keys(this.world.Components[\"RectangleComponent\"]).forEach((entity) => {\n      this.world.Entity(entity).destroy();\n    });\n  }\n\n  changeMap = (e) => {\n    this.destroyMap();\n    this.setState({ map: e.target.value }, () => {\n      this.initializeMap();\n    });\n  }\n\n  volume = (e) => {\n    this.setState({ volume: e.target.volume });\n  }\n\n  render() {\n    return (\n      <div>\n        <canvas id=\"board\" width=\"1280\" height=\"720\" />\n        <div style={ {float: 'right'} }>\n          <label htmlFor=\"map\">Choose map:</label>\n          <br />\n          <select id=\"map\" defaultValue={this.state.map} onChange={this.changeMap}>\n            {Maps.map((m, i) => {\n              return <option key={i}>{m}</option>\n            })}\n          </select>\n          <br />\n          <br />\n          <label htmlFor=\"animation\">Choose animation:</label>\n          <br />\n          <select id=\"animation\" defaultValue={this.state.animation} onChange={this.changeAnimation}>\n            {Object.keys(this.state.characterMap).map((a, i) => {\n              return <option key={i}>{a}</option>\n            })}\n          </select>\n          <br />\n          <br />\n          <label htmlFor=\"direction\">Choose direction:</label>\n          <br />\n          <select id=\"direction\" defaultValue={this.state.direction} onChange={this.changeDirection}>\n            <option value=\"left\">Left</option>\n            <option value=\"right\">Right</option>\n          </select>\n          <br />\n          <br />\n          <ReactAudioPlayer id=\"rap\"\n            src={this.state.music}\n            loop={true}\n            controls={true}\n            onVolumeChanged={this.volume}\n            volume={this.state.volume}\n          />\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}